파이썬 설치
print
help
파이썬 장단점?
조

★clean code : 깔끔한 코드 
1. snake case
	- 단어를 표기할 때 모두 소문자로 표기하며, 띄어쓰기 대신 ( _ ) 로 표기
	- DB 컬럼에 사용
	ex) phone_number, created_at, updated_at

2. cammel case
	- 단어를 표기할 때 첫 문자는 소문자로 시작하며 띄어쓰기 대신 ( 대문자 ) 로 단어를 구분.
	- Java의 변수를 선언할 때 camelCase로 선언한다.
	ex) phoneNumber, createdAt, updatedAt

3. Upper Case
	- 단어의 첫글자만 대문자, Java Class 파일에서 사용
	ex) User, Customer, Intro

- API : 주로 API통신 규격에서는 Snake Case를 많이 사용한다.
- DB : Snake Case
- Java : Camel Case, Class파일만 UpperCase
문자 출력 print(f"{변수나 값}")
변수선언
자료형 
숫자형(int) + - * / **(제곱) //(몫) %(나머지)
문자형(str)
 " "   ' '  겹침방지 + *
""" """   ''' ''' 여러줄입력
\n enter(줄바꿈)
\t tab(몇칸 띄기)
\\

print("%d+%d=%d" %(a,a,a+a))
print("company=%s,a=%d" %(company, a))
%d 정수
%f 실수
%s 문자
print(company[0]) 해당 글자 추출
%c 한글자만 추출
print("%c" %company[0])

회사에서 3.2일경우 밑에 공식 안돌아감
버전 3.6
print(f"{변수}")
print(f"{a}+{a}={a+a}")

print(f"{2/3}")  0.6666666666666666
print("%.3f" %(2/3)) 0.667
%.3f > 3자리까지만 출력

	>>> print("name : %s, age : %d" %(name, age))
		name : Lee, age : 15
	>>> print(f"name : {name}, age : {age}")
		name : Lee, age : 15

	>>> print("%2d" %(1))
		 1
	>>> print("%2d" %(10))
		10
	>>> print("%2d" %(100))
		100
	>>> print("%3d" %(100))
		100
	>>> print("%3d" %(1))
		  1
%2d > 줄맞춤

찾기 기능 find index
	>>> print(company.find("v"))
		2
	>>> print(company.index("v"))
		2
	>>> print(company[2])
		v

>>> b= company.find("e")
>>> print(company[b])
e
>>> print(company[company.find("e")])
e
갯수 세기 count

>>> print(company.count("n")) >>>1


길이 제기 len
>>> print(len(company))

파이썬 특징 
1. 스크립트 언어
a=1
a=2
print(a)
2

2. 동적 타이핑 : 자료형을 알아서 선언함
a = 1
b = "hi"
print(a+b) Error

3. 플랫폼 독립적
OS
 window 
 ★linux(서버용)
 mac

★딕셔너리 (dictionary) >>  KEY와 VALUE로 이루어짐
{key : value}
	>>> person = {'name':"kim",'age':10}
	>>> print(person)
		{'name': 'kim', 'age': 10}
	>>> print(person["age"])
		10
	>>> print(person["company"])
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		KeyError: 'company'
.get(key)
	>>> print(person.get("company"))
		None
	>>> print(person.get("name"))
		kim
.keys()
	>>> print(person.keys())
	dict_keys(['name', 'age'])
.values()
	>>> print(person.values())
	dict_values(['kim', 10])

	>>> person = {'name':'kim'}
	>>> person2 = {'name':'lee'}
	>>> tmp = [person, person2]
	>>> print(tmp)
		[{'name': 'kim'}, {'name': 'lee'}]
	>>> print(tmp[0].get("name"))
		kim
	>>> print(tmp[1].get("name"))
		lee
	>>> person3 = {'name':'park'}
	>>> tmp.append(person3)                          <배열 추가
	>>> print(tmp)
		[{'name': 'kim'}, {'name': 'lee'}, {'name': 'park'}]
	>>> del tmp[0]
	>>> print(tmp)
		[{'name': 'lee'}, {'name': 'park'}]

★리스트 list[ , , , , ]
순서가 있다 append 넣고 remove 지우기

	>>> num_list = [158, 45, 2, 1 , 3 ,56, 84, 168]
정렬 sort
	>>> num_list.sort()
	>>> print(num_list)
		[1, 2, 3, 45, 56, 84, 158, 168]
역순 reverse
	>>> print(num_list)
		[168, 158, 84, 56, 45, 3, 2, 1]
삽입 insert(index, element)
	>>> num_list.insert(4,4)
	>>> print(num_list)
		[168, 158, 84, 56, 4, 45, 3, 2, 1]
범위 추출
	>>> print(num_list[:4])
		[168, 158, 84, 56]
	>>> print(num_list[1:4])
		[158, 84, 56]
	>>> print(num_list[2:])
		[84, 56, 4, 45, 3, 2, 1]
	>>> print(num_list[:])
		[168, 158, 84, 56, 4, 45, 3, 2, 1]
얕은복사(=) 깊은복사(.copy())
	>>> person1={'name':'kim'}
	>>> person2={'name':'park'}
	>>> person3={'name':'lee'}
	>>> person4={'name':'zo'}
	>>> tmp= [person1, person2, person3, person4]
	>>> tmp[0]
		{'name': 'kim'}
	>>> person1['name'] = 'jung'
	>>> tmp[0]
		{'name': 'jung'}
	>>> tmp
		[{'name': 'jung'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}]
	>>> tmp2 = tmp.copy()
	>>> tmp2
		[{'name': 'jung'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}]
	>>> tmp3 = tmp
	>>> tmp3
		[{'name': 'jung'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}]
	>>> tmp3.append(1)
	>>> tmp3
		[{'name': 'jung'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}, 1]
	>>> tmp
		[{'name': 'jung'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}, 1]
	>>> tmp2
		[{'name': 'jung'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}]
	>>> person1['name'] = 'kim'
	>>> tmp
		[{'name': 'kim'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}, 1]
	>>> tmp2
		[{'name': 'kim'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}]
	>>> tmp3
		[{'name': 'kim'}, {'name': 'park'}, {'name': 'lee'}, {'name': 'zo'}, 1]
	>>> id(tmp)
		2252651728640
	>>> id(tmp2)
		2252651662656
	>>> id(tmp3)
		2252651728640
	>>> id(tmp[0])
		2252648588864
	>>> id(tmp2[0])
		2252648588864
	>>> id(tmp3[0])
		2252648588864
	>>> tmp4=[person.copy()]
	>>> id(tmp4)
		2252651727168

튜플 ( ) > 읽기만 가능
	>>> a=(1,2,3)
	>>> a[0]
		1
	>>> a.append(4)
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		AttributeError: 'tuple' object has no attribute 'append'
	>>> a.remove(1)
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		AttributeError: 'tuple' object has no attribute 'remove'
Set {} 집합 & 순서가 없다 & 중복x
	>>> a={1,2,3}
	>>> a
		{1, 2, 3}
	>>> a.add(4)
	>>> a
		{1, 2, 3, 4}
	>>> a.add(2) <(중복이 안됨)
	>>> a
		{1, 2, 3, 4}
	>>> tmp = [1,2,3,3,2,1,0]
	>>> a=set(tmp) 
	>>> a
		{0, 1, 2, 3}
	>>> tmp2 = list(a)
	>>> tmp2
		[0, 1, 2, 3]
	>>> tmp2[0]
		0

	>>> tmp3 = [429, 2, 3 , 5, 34, 4, 1, 2,6,5,2,3,3,5,415,5,1,2,2,3,2]
	>>> a=set(tmp3)
	>>> tmp3
		[429, 2, 3, 5, 34, 4, 1, 2, 6, 5, 2, 3, 3, 5, 415, 5, 1, 2, 2, 3, 2]

	>>> b={}
	>>> b=set(tmp3)
	>>> b
		{1, 2, 3, 34, 5, 4, 6, 429, 415}

	>>> b= list(b)
	>>> b.sort()
	>>> b
		[1, 2, 3, 4, 5, 6, 34, 415, 429]

집합
	>>> a={1,2,3}
	>>> b={2,3,4,5}
	>>> a-b                    <차집합
		{1}
	>>> a|b                    <합집합
		{1, 2, 3, 4, 5}
	>>> a+b
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		TypeError: unsupported operand type(s) for +: 'set' and 'set'
	>>> a&b                    <교집합
		{2, 3}

	>>> c=list(a&b)
	>>> c[1]
		3
	>>> list(a&b)[1]
		3
	>>> a&b[1]                                < Set이 순서가 없어서 그럼
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		TypeError: 'set' object is not subscriptable
update와 remove
	>>> a
		{1, 2, 3}
	>>> a.update([4,5,6,7])
	>>> a
		{1, 2, 3, 4, 5, 6, 7}
	>>> a.remove(4)
	>>> a
		{1, 2, 3, 5, 6, 7}

불 bool boolean
True False
= 선언    == 같다      > 초과 < 미만 >= 이상 <=이하
	>>> a= True
	>>> a
		True
	>>> a=False
	>>> a
		False
	>>> 1>2
		False
	>>> 1<2
		True

print("person1의 이름은 %s이고 score는 %d로 %d " %(a[0].get('name'), a[0].get('score'), a[0].get('score') >=80))
print("person2의 이름은 %s이고 score는 %d로 %d " %(a[1].get('name'), a[1].get('score'), a[1].get('score') >=80))
print("person3의 이름은 %s이고 score는 %d로 %d " %(a[2].get('name'), a[2].get('score'), a[2].get('score') >=80))

print(f"person1의 이름은 {a[0].get('name')}이고, score는 {a[0].get('score')}로 {a[0].get('score') >= 80} ")
print(f"person2의 이름은 {a[1].get('name')}이고, score는 {a[1].get('score')}로 {a[1].get('score') >= 80} ")
print(f"person3의 이름은 {a[2].get('name')}이고, score는 {a[2].get('score')}로 {a[2].get('score') >= 80} ")

